worker_processes auto;
worker_rlimit_nofile 100000;
error_log /var/log/nginx/error.log crit;

events{
    worker_connections 4000;
    use epoll;
    multi_accept on;
}

http {
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
    access_log off;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

gzip_min_length 10240;
    gzip_comp_level 1;
    gzip_vary on;
    gzip_disable msie6;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
        # text/html is always compressed by HttpGzipModule
        text/css
        text/javascript
        text/xml
        text/plain
        text/x-component
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/rss+xml
        application/atom+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject
        image/svg+xml;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    # request timed out -- default 60
    client_body_timeout 10;

    # if client stop responding, free up memory -- default 60
    send_timeout 2;

    # server will close connection after this time -- default 75
    keepalive_timeout 30;

    # number of requests client can make over keep-alive -- for testing environment
    keepalive_requests 100000;

    include mime.types;

    upstream monolith {
        server localhost:3000;
    }

    server {
        server_name api.rxonvrdo.dev;

        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;

        listen [::]:443 ssl;
        listen 443 ssl;

        location / {
            proxy_set_header 'Access-Control-Max-Age' 1728000;
    proxy_set_header 'Access-Control-Allow-Origin' '*';
    proxy_set_header 'Access-Control-Allow-Credentials' 'true';
    proxy_set_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
    proxy_set_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
                # Captura o primeiro elemento do caminho após a barra inicial e o restante do caminho
            if ($request_uri ~ ^/([^/]+)(/.*|)$) {
                set $upstream_name $1;
                set $proxy_path $2;
            }

            # Define a URL do upstream com base no primeiro elemento do caminho
            set $upstream_url http://$upstream_name;

            # Faz o proxy pass para o upstream com base na URL definida
            proxy_pass $upstream_url$proxy_path;

            # Configura os cabeçalhos de proxy
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $http_cf_connecting_ip;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    server {
        server_name rxonvrdo.dev *.rxonvrdo.dev;

        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;

        listen [::]:443 ssl;
        listen 443 ssl;

        root /var/www/html;
        index index.html;

        add_header Last-Modified $date_gmt;
        add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        if_modified_since off;
        expires off;
        etag off;

        if ($http_host ~* "^(.*?)\.rxonvrdo\.dev$") {
            set $subdomain $1;
            rewrite ^(.*)$ /Oqkwnm3kl5Mn/$subdomain/$1 last;
        }


        location / {
            try_files $uri $uri/ /index.html;
        }
    }
}